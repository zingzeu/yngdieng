syntax = "proto3";

package yngdieng;
option csharp_namespace = "Yngdieng.Protos";
option go_package = "github.com/mindonglab/yngdieng/shared";
import "shared/phonology.proto";
import "shared/documents.proto";
import "google/api/annotations.proto";

service YngdiengService {
  rpc Search(SearchRequest) returns (SearchResponse) {
  }
  rpc SearchV2(SearchV2Request) returns (SearchV2Response) {
    option (google.api.http) = {
      get: "/v2/search"
    };
  }
  rpc GetAggregatedDocument(GetAggregatedDocumentRequest) returns (HistoricalDocument);
  rpc GetFengDocument(GetFengDocumentRequest) returns (FengDocument);
  // TODO: we need a better API resource for a "Word".
  rpc GetYngdiengDocument(GetYngdiengDocumentRequest) returns (YngdiengDocument) {
    option (google.api.http) = {
      get: "/v2/yngdieng_document/{id}"
    };
  }
  rpc GetDebugInfo(GetDebugInfoRequest) returns (DebugInfo) {
    option (google.api.http) = {
      get: "/v2/debugz"
    };
  }

  rpc SimplifyText(SimplifyTextRequest) returns (SimplifyTextResponse);

  rpc GenerateSandhi(GenerateSandhiRequest) returns (GenerateSandhiResponse);
}

// Next ID: 3
message SearchRequest {
  string query = 1;
  int64 offset = 2;
}

// Next ID: 4
message SearchResponse {
  repeated SearchResultRow results = 1;

  // Milliseconds taken to compute the results.
  int64 computation_time_ms = 2;

  // Total number of results.
  int64 length = 3;
}

message SearchV2Request {
  string query = 1;
  string page_token = 2;

  // Maximum page size to return.
  int32 page_size = 3;
}

message SearchV2Response {

  repeated SearchCard result_cards = 1;

  // If empty, indicates the end of results.
  string next_page_token = 2;

  message SearchCard {
    oneof card {
      NoResultsCard no_results = 1;
      EndOfResultsCard end_of_results = 2;
      WordCard word = 3;
      GenericMessageCard generic_message = 4;
      // Client use only
      bool is_loading = 5;
    }

    message GenericMessageCard {
      RichText message = 1;
    }

    message EndOfResultsCard {
    }

    message NoResultsCard {
    }

    message WordCard {

      string id = 1;

      RichText yngping = 2;

      RichText hanzi = 3;

      RichText details = 4;

      double score = 5;
    }

    message MonoHanziCard {
    }

    message AutoGeneratedPronunciationCard {
    }
  }
}

// Internal use only.
message PaginationToken {

  // The last doc returned in the previous page.
  ScoreDoc last_doc = 1;

  // Represents data in Lucene.Net.Search.ScoreDoc.
  message ScoreDoc {
    float score = 1;
    int32 doc = 2;
  }
}

message RichText {
  repeated Segment segments = 1;

  message Segment {
    string text = 1;
    bool highlighted = 2;
  }
}

message SearchResultRow {
  oneof result {
    HistoricalDocument historical_document = 1;
    FengDocument feng_document = 2;
    // TODO: separator
  }
}

message GetFengDocumentRequest {
  string id = 1;
}

message GetYngdiengDocumentRequest {
  string id = 1;
}

message GetAggregatedDocumentRequest {
  string id = 1;
}

// Internal Query
// Next ID: 9
message Query {
  oneof query {
    // 按模糊音查询
    string fuzzy_pron_query = 1;
    //
    string yngping_tone_pattern_query = 8;
    // 音韵地位查询
    PhonologyQuery phonology_query = 2;
    // 汉字查询（单字或词汇）
    string hanzi_query = 3;
  }

  SortByMethod sort_by = 4;

  // For pagination.
  // Requests results starting with the offset.
  int32 offset = 5;

  // Must not be all empty
  message PhonologyQuery {
    // Optional
    Initial initial = 1;
    // Optional
    Final final = 2;
    // Optional
    Tone tone = 3;
  }

  enum SortByMethod {
    SORT_BY_UNSPECIFIED = 0;
    INITIAL_FINAL_TONE = 1;
  }

  // 总是包含历史读音 (DFD/戚林).
  bool always_include_historical = 6;

  // 仅包含历史读音 (DFD/戚林).
  bool only_historical = 7;
}

message GetDebugInfoRequest {
}

message DebugInfo {
  string index_version = 1;
}

enum ZhConversionPreference {
  // Do not use.
  LANGUAGE_PREFERENCE_UNKNOWN = 0;
  // No conversion.
  LANGAUGE_PREFERENCE_ORIGINAL = 1;
  // Convert to zh-hans
  LANGAUGE_PREFERENCE_HANS = 2;
  // Convert to zh-hant
  LANGAUGE_PREFERENCE_HANT = 3;
}

message UserPreference {
  ZhConversionPreference zh_conversion_preference = 1;

  // If true, includes zingzeu_words-only entries in the search result.
  bool show_sourceless_search_results = 2;
}

message SimplifyTextRequest {
  string text = 1;
}

message SimplifyTextResponse {
  string converted_text = 1;
}

message GenerateSandhiRequest {
  repeated string inputs = 1;
}

message GenerateSandhiResponse {
  repeated SandhiResult results = 1;

  message SandhiResult {
    bool has_error = 1;
    string output = 2;
    string audio_url = 3;
  }
}
// source: documents.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var phonology_pb = require('./phonology_pb.js');
goog.object.extend(proto, phonology_pb);
goog.exportSymbol('proto.yngdieng.Document', null, global);
goog.exportSymbol('proto.yngdieng.Document.CikLinSourceInfo', null, global);
goog.exportSymbol('proto.yngdieng.Document.DFDSourceInfo', null, global);
goog.exportSymbol('proto.yngdieng.Document.IdCase', null, global);
goog.exportSymbol('proto.yngdieng.Document.SourceInfoCase', null, global);
goog.exportSymbol('proto.yngdieng.Hanzi', null, global);
goog.exportSymbol('proto.yngdieng.Hanzi.HanziCase', null, global);
goog.exportSymbol('proto.yngdieng.YngdiengIndex', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yngdieng.Document = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yngdieng.Document.repeatedFields_, proto.yngdieng.Document.oneofGroups_);
};
goog.inherits(proto.yngdieng.Document, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yngdieng.Document.displayName = 'proto.yngdieng.Document';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yngdieng.Document.CikLinSourceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yngdieng.Document.CikLinSourceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yngdieng.Document.CikLinSourceInfo.displayName = 'proto.yngdieng.Document.CikLinSourceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yngdieng.Document.DFDSourceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yngdieng.Document.DFDSourceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yngdieng.Document.DFDSourceInfo.displayName = 'proto.yngdieng.Document.DFDSourceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yngdieng.YngdiengIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yngdieng.YngdiengIndex.repeatedFields_, null);
};
goog.inherits(proto.yngdieng.YngdiengIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yngdieng.YngdiengIndex.displayName = 'proto.yngdieng.YngdiengIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yngdieng.Hanzi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.yngdieng.Hanzi.oneofGroups_);
};
goog.inherits(proto.yngdieng.Hanzi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yngdieng.Hanzi.displayName = 'proto.yngdieng.Hanzi';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yngdieng.Document.repeatedFields_ = [3,9];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.yngdieng.Document.oneofGroups_ = [[1,12],[10,11]];

/**
 * @enum {number}
 */
proto.yngdieng.Document.IdCase = {
  ID_NOT_SET: 0,
  CIKLIN_ID: 1,
  DFD_ID: 12
};

/**
 * @return {proto.yngdieng.Document.IdCase}
 */
proto.yngdieng.Document.prototype.getIdCase = function() {
  return /** @type {proto.yngdieng.Document.IdCase} */(jspb.Message.computeOneofCase(this, proto.yngdieng.Document.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.yngdieng.Document.SourceInfoCase = {
  SOURCE_INFO_NOT_SET: 0,
  CIKLIN: 10,
  DFD: 11
};

/**
 * @return {proto.yngdieng.Document.SourceInfoCase}
 */
proto.yngdieng.Document.prototype.getSourceInfoCase = function() {
  return /** @type {proto.yngdieng.Document.SourceInfoCase} */(jspb.Message.computeOneofCase(this, proto.yngdieng.Document.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yngdieng.Document.prototype.toObject = function(opt_includeInstance) {
  return proto.yngdieng.Document.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yngdieng.Document} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Document.toObject = function(includeInstance, msg) {
  var f, obj = {
    ciklinId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dfdId: jspb.Message.getFieldWithDefault(msg, 12, 0),
    hanziCanonical: (f = msg.getHanziCanonical()) && proto.yngdieng.Hanzi.toObject(includeInstance, f),
    hanziAlternativesList: jspb.Message.toObjectList(msg.getHanziAlternativesList(),
    proto.yngdieng.Hanzi.toObject, includeInstance),
    initial: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pb_final: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tone: jspb.Message.getFieldWithDefault(msg, 6, 0),
    buc: jspb.Message.getFieldWithDefault(msg, 7, ""),
    yngpingCanonical: jspb.Message.getFieldWithDefault(msg, 8, ""),
    yngpingPermutationsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    ciklin: (f = msg.getCiklin()) && proto.yngdieng.Document.CikLinSourceInfo.toObject(includeInstance, f),
    dfd: (f = msg.getDfd()) && proto.yngdieng.Document.DFDSourceInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yngdieng.Document}
 */
proto.yngdieng.Document.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yngdieng.Document;
  return proto.yngdieng.Document.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yngdieng.Document} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yngdieng.Document}
 */
proto.yngdieng.Document.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCiklinId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDfdId(value);
      break;
    case 2:
      var value = new proto.yngdieng.Hanzi;
      reader.readMessage(value,proto.yngdieng.Hanzi.deserializeBinaryFromReader);
      msg.setHanziCanonical(value);
      break;
    case 3:
      var value = new proto.yngdieng.Hanzi;
      reader.readMessage(value,proto.yngdieng.Hanzi.deserializeBinaryFromReader);
      msg.addHanziAlternatives(value);
      break;
    case 4:
      var value = /** @type {!proto.yngdieng.Initial} */ (reader.readEnum());
      msg.setInitial(value);
      break;
    case 5:
      var value = /** @type {!proto.yngdieng.Final} */ (reader.readEnum());
      msg.setFinal(value);
      break;
    case 6:
      var value = /** @type {!proto.yngdieng.Tone} */ (reader.readEnum());
      msg.setTone(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuc(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setYngpingCanonical(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addYngpingPermutations(value);
      break;
    case 10:
      var value = new proto.yngdieng.Document.CikLinSourceInfo;
      reader.readMessage(value,proto.yngdieng.Document.CikLinSourceInfo.deserializeBinaryFromReader);
      msg.setCiklin(value);
      break;
    case 11:
      var value = new proto.yngdieng.Document.DFDSourceInfo;
      reader.readMessage(value,proto.yngdieng.Document.DFDSourceInfo.deserializeBinaryFromReader);
      msg.setDfd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yngdieng.Document.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yngdieng.Document.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yngdieng.Document} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Document.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getHanziCanonical();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.yngdieng.Hanzi.serializeBinaryToWriter
    );
  }
  f = message.getHanziAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.yngdieng.Hanzi.serializeBinaryToWriter
    );
  }
  f = message.getInitial();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFinal();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTone();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getBuc();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getYngpingCanonical();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getYngpingPermutationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getCiklin();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.yngdieng.Document.CikLinSourceInfo.serializeBinaryToWriter
    );
  }
  f = message.getDfd();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.yngdieng.Document.DFDSourceInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yngdieng.Document.CikLinSourceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.yngdieng.Document.CikLinSourceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yngdieng.Document.CikLinSourceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Document.CikLinSourceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yngdieng.Document.CikLinSourceInfo}
 */
proto.yngdieng.Document.CikLinSourceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yngdieng.Document.CikLinSourceInfo;
  return proto.yngdieng.Document.CikLinSourceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yngdieng.Document.CikLinSourceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yngdieng.Document.CikLinSourceInfo}
 */
proto.yngdieng.Document.CikLinSourceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yngdieng.Document.CikLinSourceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yngdieng.Document.CikLinSourceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yngdieng.Document.CikLinSourceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Document.CikLinSourceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.yngdieng.Document.DFDSourceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yngdieng.Document.DFDSourceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Document.DFDSourceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    columnNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lineNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    radicalId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yngdieng.Document.DFDSourceInfo}
 */
proto.yngdieng.Document.DFDSourceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yngdieng.Document.DFDSourceInfo;
  return proto.yngdieng.Document.DFDSourceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yngdieng.Document.DFDSourceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yngdieng.Document.DFDSourceInfo}
 */
proto.yngdieng.Document.DFDSourceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumnNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadicalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yngdieng.Document.DFDSourceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yngdieng.Document.DFDSourceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Document.DFDSourceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getColumnNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLineNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRadicalId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 page_number = 1;
 * @return {number}
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.yngdieng.Document.DFDSourceInfo} returns this
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 column_number = 2;
 * @return {number}
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.getColumnNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.yngdieng.Document.DFDSourceInfo} returns this
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.setColumnNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 line_number = 3;
 * @return {number}
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.getLineNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.yngdieng.Document.DFDSourceInfo} returns this
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.setLineNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 radical_id = 4;
 * @return {number}
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.getRadicalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.yngdieng.Document.DFDSourceInfo} returns this
 */
proto.yngdieng.Document.DFDSourceInfo.prototype.setRadicalId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 ciklin_id = 1;
 * @return {number}
 */
proto.yngdieng.Document.prototype.getCiklinId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setCiklinId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.yngdieng.Document.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.clearCiklinId = function() {
  return jspb.Message.setOneofField(this, 1, proto.yngdieng.Document.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yngdieng.Document.prototype.hasCiklinId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 dfd_id = 12;
 * @return {number}
 */
proto.yngdieng.Document.prototype.getDfdId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setDfdId = function(value) {
  return jspb.Message.setOneofField(this, 12, proto.yngdieng.Document.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.clearDfdId = function() {
  return jspb.Message.setOneofField(this, 12, proto.yngdieng.Document.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yngdieng.Document.prototype.hasDfdId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Hanzi hanzi_canonical = 2;
 * @return {?proto.yngdieng.Hanzi}
 */
proto.yngdieng.Document.prototype.getHanziCanonical = function() {
  return /** @type{?proto.yngdieng.Hanzi} */ (
    jspb.Message.getWrapperField(this, proto.yngdieng.Hanzi, 2));
};


/**
 * @param {?proto.yngdieng.Hanzi|undefined} value
 * @return {!proto.yngdieng.Document} returns this
*/
proto.yngdieng.Document.prototype.setHanziCanonical = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.clearHanziCanonical = function() {
  return this.setHanziCanonical(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yngdieng.Document.prototype.hasHanziCanonical = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Hanzi hanzi_alternatives = 3;
 * @return {!Array<!proto.yngdieng.Hanzi>}
 */
proto.yngdieng.Document.prototype.getHanziAlternativesList = function() {
  return /** @type{!Array<!proto.yngdieng.Hanzi>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.yngdieng.Hanzi, 3));
};


/**
 * @param {!Array<!proto.yngdieng.Hanzi>} value
 * @return {!proto.yngdieng.Document} returns this
*/
proto.yngdieng.Document.prototype.setHanziAlternativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.yngdieng.Hanzi=} opt_value
 * @param {number=} opt_index
 * @return {!proto.yngdieng.Hanzi}
 */
proto.yngdieng.Document.prototype.addHanziAlternatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.yngdieng.Hanzi, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.clearHanziAlternativesList = function() {
  return this.setHanziAlternativesList([]);
};


/**
 * optional Initial initial = 4;
 * @return {!proto.yngdieng.Initial}
 */
proto.yngdieng.Document.prototype.getInitial = function() {
  return /** @type {!proto.yngdieng.Initial} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.yngdieng.Initial} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setInitial = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Final final = 5;
 * @return {!proto.yngdieng.Final}
 */
proto.yngdieng.Document.prototype.getFinal = function() {
  return /** @type {!proto.yngdieng.Final} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.yngdieng.Final} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setFinal = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Tone tone = 6;
 * @return {!proto.yngdieng.Tone}
 */
proto.yngdieng.Document.prototype.getTone = function() {
  return /** @type {!proto.yngdieng.Tone} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.yngdieng.Tone} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setTone = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string buc = 7;
 * @return {string}
 */
proto.yngdieng.Document.prototype.getBuc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setBuc = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string yngping_canonical = 8;
 * @return {string}
 */
proto.yngdieng.Document.prototype.getYngpingCanonical = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setYngpingCanonical = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string yngping_permutations = 9;
 * @return {!Array<string>}
 */
proto.yngdieng.Document.prototype.getYngpingPermutationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.setYngpingPermutationsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.addYngpingPermutations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.clearYngpingPermutationsList = function() {
  return this.setYngpingPermutationsList([]);
};


/**
 * optional CikLinSourceInfo ciklin = 10;
 * @return {?proto.yngdieng.Document.CikLinSourceInfo}
 */
proto.yngdieng.Document.prototype.getCiklin = function() {
  return /** @type{?proto.yngdieng.Document.CikLinSourceInfo} */ (
    jspb.Message.getWrapperField(this, proto.yngdieng.Document.CikLinSourceInfo, 10));
};


/**
 * @param {?proto.yngdieng.Document.CikLinSourceInfo|undefined} value
 * @return {!proto.yngdieng.Document} returns this
*/
proto.yngdieng.Document.prototype.setCiklin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.yngdieng.Document.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.clearCiklin = function() {
  return this.setCiklin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yngdieng.Document.prototype.hasCiklin = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DFDSourceInfo dfd = 11;
 * @return {?proto.yngdieng.Document.DFDSourceInfo}
 */
proto.yngdieng.Document.prototype.getDfd = function() {
  return /** @type{?proto.yngdieng.Document.DFDSourceInfo} */ (
    jspb.Message.getWrapperField(this, proto.yngdieng.Document.DFDSourceInfo, 11));
};


/**
 * @param {?proto.yngdieng.Document.DFDSourceInfo|undefined} value
 * @return {!proto.yngdieng.Document} returns this
*/
proto.yngdieng.Document.prototype.setDfd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.yngdieng.Document.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yngdieng.Document} returns this
 */
proto.yngdieng.Document.prototype.clearDfd = function() {
  return this.setDfd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yngdieng.Document.prototype.hasDfd = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yngdieng.YngdiengIndex.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yngdieng.YngdiengIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.yngdieng.YngdiengIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yngdieng.YngdiengIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.YngdiengIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentsList: jspb.Message.toObjectList(msg.getDocumentsList(),
    proto.yngdieng.Document.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yngdieng.YngdiengIndex}
 */
proto.yngdieng.YngdiengIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yngdieng.YngdiengIndex;
  return proto.yngdieng.YngdiengIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yngdieng.YngdiengIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yngdieng.YngdiengIndex}
 */
proto.yngdieng.YngdiengIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.yngdieng.Document;
      reader.readMessage(value,proto.yngdieng.Document.deserializeBinaryFromReader);
      msg.addDocuments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yngdieng.YngdiengIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yngdieng.YngdiengIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yngdieng.YngdiengIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.YngdiengIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.yngdieng.Document.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Document documents = 1;
 * @return {!Array<!proto.yngdieng.Document>}
 */
proto.yngdieng.YngdiengIndex.prototype.getDocumentsList = function() {
  return /** @type{!Array<!proto.yngdieng.Document>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.yngdieng.Document, 1));
};


/**
 * @param {!Array<!proto.yngdieng.Document>} value
 * @return {!proto.yngdieng.YngdiengIndex} returns this
*/
proto.yngdieng.YngdiengIndex.prototype.setDocumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.yngdieng.Document=} opt_value
 * @param {number=} opt_index
 * @return {!proto.yngdieng.Document}
 */
proto.yngdieng.YngdiengIndex.prototype.addDocuments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.yngdieng.Document, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yngdieng.YngdiengIndex} returns this
 */
proto.yngdieng.YngdiengIndex.prototype.clearDocumentsList = function() {
  return this.setDocumentsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.yngdieng.Hanzi.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.yngdieng.Hanzi.HanziCase = {
  HANZI_NOT_SET: 0,
  REGULAR: 1,
  IDS: 2
};

/**
 * @return {proto.yngdieng.Hanzi.HanziCase}
 */
proto.yngdieng.Hanzi.prototype.getHanziCase = function() {
  return /** @type {proto.yngdieng.Hanzi.HanziCase} */(jspb.Message.computeOneofCase(this, proto.yngdieng.Hanzi.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yngdieng.Hanzi.prototype.toObject = function(opt_includeInstance) {
  return proto.yngdieng.Hanzi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yngdieng.Hanzi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Hanzi.toObject = function(includeInstance, msg) {
  var f, obj = {
    regular: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ids: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yngdieng.Hanzi}
 */
proto.yngdieng.Hanzi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yngdieng.Hanzi;
  return proto.yngdieng.Hanzi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yngdieng.Hanzi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yngdieng.Hanzi}
 */
proto.yngdieng.Hanzi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegular(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yngdieng.Hanzi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yngdieng.Hanzi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yngdieng.Hanzi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yngdieng.Hanzi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string regular = 1;
 * @return {string}
 */
proto.yngdieng.Hanzi.prototype.getRegular = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.yngdieng.Hanzi} returns this
 */
proto.yngdieng.Hanzi.prototype.setRegular = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.yngdieng.Hanzi.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.yngdieng.Hanzi} returns this
 */
proto.yngdieng.Hanzi.prototype.clearRegular = function() {
  return jspb.Message.setOneofField(this, 1, proto.yngdieng.Hanzi.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yngdieng.Hanzi.prototype.hasRegular = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ids = 2;
 * @return {string}
 */
proto.yngdieng.Hanzi.prototype.getIds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.yngdieng.Hanzi} returns this
 */
proto.yngdieng.Hanzi.prototype.setIds = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.yngdieng.Hanzi.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.yngdieng.Hanzi} returns this
 */
proto.yngdieng.Hanzi.prototype.clearIds = function() {
  return jspb.Message.setOneofField(this, 2, proto.yngdieng.Hanzi.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yngdieng.Hanzi.prototype.hasIds = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.yngdieng);

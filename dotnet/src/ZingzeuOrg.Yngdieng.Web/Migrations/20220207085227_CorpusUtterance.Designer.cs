// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZingzeuOrg.Yngdieng.Web.Db;

#nullable disable

namespace ZingzeuOrg.Yngdieng.Web.Migrations
{
    [DbContext(typeof(AdminContext))]
    [Migration("20220207085227_CorpusUtterance")]
    partial class CorpusUtterance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "extension_scope", new[] { "contrib", "dragon_boat" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "unspecified", "male", "female" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "sandhi_category", new[] { "unspecified", "sandhi", "bengzi" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "variant", new[] { "unspecified", "fuzhou_city", "lianjiang", "cikling" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.AudioClip", b =>
                {
                    b.Property<int>("AudioClipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("audio_clip_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AudioClipId"));

                    b.Property<string>("BlobLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blob_location");

                    b.Property<Instant>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Pronunciation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pronunciation");

                    b.Property<int?>("SpeakerId")
                        .HasColumnType("integer")
                        .HasColumnName("speaker_id");

                    b.HasKey("AudioClipId")
                        .HasName("pk_audio_clips");

                    b.HasIndex("SpeakerId")
                        .HasDatabaseName("ix_audio_clips_speaker_id");

                    b.ToTable("audio_clips", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.AudioClipsByWordId", b =>
                {
                    b.Property<int>("AudioClipId")
                        .HasColumnType("integer")
                        .HasColumnName("audio_clip_id");

                    b.Property<string>("BlobLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blob_location");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Pronunciation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pronunciation");

                    b.Property<int?>("SpeakerAge")
                        .HasColumnType("integer")
                        .HasColumnName("speaker_age");

                    b.Property<string>("SpeakerDisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("speaker_display_name");

                    b.Property<Gender>("SpeakerGender")
                        .HasColumnType("gender")
                        .HasColumnName("speaker_gender");

                    b.Property<string>("SpeakerLocation")
                        .HasColumnType("text")
                        .HasColumnName("speaker_location");

                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.ToTable((string)null);

                    b.ToView("SomeView2");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.Extension", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("ExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("extension_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExtensionId"));

                    b.Property<string[]>("Contributors")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("contributors");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("explanation");

                    b.Property<ExtensionScope>("Scope")
                        .HasColumnType("extension_scope")
                        .HasColumnName("scope");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("WordId", "ExtensionId")
                        .HasName("pk_extensions");

                    b.ToTable("extensions", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.FengCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("LevelOneName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level_one_name");

                    b.Property<string>("LevelTwoName")
                        .HasColumnType("text")
                        .HasColumnName("level_two_name");

                    b.HasKey("Id")
                        .HasName("pk_feng_categories");

                    b.ToTable("feng_categories", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.FengWord", b =>
                {
                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer")
                        .HasColumnName("line_number");

                    b.Property<string>("ExplanationParsed")
                        .HasColumnType("text")
                        .HasColumnName("explanation_parsed");

                    b.Property<string>("ExplanationRaw")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("explanation_raw");

                    b.Property<string>("HanziClean")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hanzi_clean");

                    b.Property<string>("HanziOriginal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hanzi_original");

                    b.Property<string>("HanziRaw")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hanzi_raw");

                    b.Property<string>("PronSandhi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pron_sandhi");

                    b.Property<string>("PronUnderlying")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pron_underlying");

                    b.Property<int?>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.HasKey("PageNumber", "LineNumber")
                        .HasName("pk_feng_words");

                    b.HasIndex("WordId")
                        .HasDatabaseName("ix_feng_words_word_id");

                    b.ToTable("feng_words", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.Pron", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("PronId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pron_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PronId"));

                    b.Property<string>("Pronunciation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pronunciation");

                    b.Property<SandhiCategory?>("SandhiCategory")
                        .HasColumnType("sandhi_category")
                        .HasColumnName("sandhi_category");

                    b.Property<Variant?>("Variant")
                        .HasColumnType("variant")
                        .HasColumnName("variant");

                    b.Property<long?>("Weight")
                        .HasColumnType("bigint")
                        .HasColumnName("weight");

                    b.HasKey("WordId", "PronId")
                        .HasName("pk_prons");

                    b.ToTable("prons", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.PronAudioClip", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("PronId")
                        .HasColumnType("integer")
                        .HasColumnName("pron_id");

                    b.Property<int>("AudioClipId")
                        .HasColumnType("integer")
                        .HasColumnName("audio_clip_id");

                    b.HasKey("WordId", "PronId", "AudioClipId")
                        .HasName("pk_pron_audio_clips");

                    b.HasIndex("AudioClipId")
                        .HasDatabaseName("ix_pron_audio_clips_audio_clip_id");

                    b.ToTable("pron_audio_clips", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.Speaker", b =>
                {
                    b.Property<int>("SpeakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("speaker_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpeakerId"));

                    b.Property<string>("Accent")
                        .HasColumnType("text")
                        .HasColumnName("accent");

                    b.Property<string>("AncestralHome")
                        .HasColumnType("text")
                        .HasColumnName("ancestral_home");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNameSource")
                        .HasColumnType("text")
                        .HasColumnName("display_name_source");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("integer")
                        .HasColumnName("year_of_birth");

                    b.HasKey("SpeakerId")
                        .HasName("pk_speakers");

                    b.ToTable("speakers", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WordId"));

                    b.Property<string>("FengCategoryId")
                        .HasColumnType("text")
                        .HasColumnName("feng_category_id");

                    b.Property<string>("Gloss")
                        .HasColumnType("text")
                        .HasColumnName("gloss");

                    b.Property<string>("Hanzi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hanzi");

                    b.Property<List<string>>("HanziAlternatives")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("hanzi_alternatives");

                    b.Property<List<string>>("MandarinWords")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("mandarin_words");

                    b.Property<string>("PreferredCorpusUtteranceId")
                        .HasColumnType("text")
                        .HasColumnName("preferred_corpus_utterance_id");

                    b.Property<string>("PreferredCorpusUtterancePreviewUrl")
                        .HasColumnType("text")
                        .HasColumnName("preferred_corpus_utterance_preview_url");

                    b.Property<int?>("PreferredSandhiAudioAudioClipId")
                        .HasColumnType("integer")
                        .HasColumnName("preferred_sandhi_audio_audio_clip_id");

                    b.HasKey("WordId")
                        .HasName("pk_words");

                    b.HasIndex("FengCategoryId")
                        .HasDatabaseName("ix_words_feng_category_id");

                    b.HasIndex("PreferredSandhiAudioAudioClipId")
                        .HasDatabaseName("ix_words_preferred_sandhi_audio_audio_clip_id");

                    b.ToTable("words", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.WordAudioClip", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("AudioClipId")
                        .HasColumnType("integer")
                        .HasColumnName("audio_clip_id");

                    b.HasKey("WordId", "AudioClipId")
                        .HasName("pk_word_audio_clips");

                    b.HasIndex("AudioClipId")
                        .HasDatabaseName("ix_word_audio_clips_audio_clip_id");

                    b.ToTable("word_audio_clips", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.WordList", b =>
                {
                    b.Property<int>("WordListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("word_list_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WordListId"));

                    b.Property<Instant>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Instant>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.HasKey("WordListId")
                        .HasName("pk_word_lists");

                    b.ToTable("word_lists", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.WordListWord", b =>
                {
                    b.Property<int>("WordListId")
                        .HasColumnType("integer")
                        .HasColumnName("word_list_id");

                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer")
                        .HasColumnName("ordering");

                    b.HasKey("WordListId", "WordId")
                        .HasName("pk_word_list_words");

                    b.HasIndex("WordId")
                        .HasDatabaseName("ix_word_list_words_word_id");

                    b.ToTable("word_list_words", (string)null);
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.WordWithPronIds", b =>
                {
                    b.Property<string>("Gloss")
                        .HasColumnType("text")
                        .HasColumnName("gloss");

                    b.Property<string>("Hanzi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hanzi");

                    b.Property<List<string>>("HanziAlternatives")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("hanzi_alternatives");

                    b.Property<List<string>>("MandarinWords")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("mandarin_words");

                    b.Property<List<int>>("PronIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("pron_ids");

                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.ToTable((string)null);

                    b.ToView("SomeView");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.AudioClip", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.Speaker", null)
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .HasConstraintName("fk_audio_clips_speakers_speaker_id");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.Extension", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.Word", null)
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_extensions_words_word_id");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.FengWord", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.Word", "LinkedWord")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .HasConstraintName("fk_feng_words_words_word_id");

                    b.Navigation("LinkedWord");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.Pron", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.Word", null)
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prons_words_word_id");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.PronAudioClip", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.AudioClip", null)
                        .WithMany()
                        .HasForeignKey("AudioClipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pron_audio_clips_audio_clips_audio_clip_id");

                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.Pron", null)
                        .WithMany()
                        .HasForeignKey("WordId", "PronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pron_audio_clips_prons_word_id_pron_id");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.Word", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.FengCategory", "FengCategory")
                        .WithMany()
                        .HasForeignKey("FengCategoryId")
                        .HasConstraintName("fk_words_feng_categories_feng_category_id");

                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.AudioClip", "PreferredSandhiAudio")
                        .WithMany()
                        .HasForeignKey("PreferredSandhiAudioAudioClipId")
                        .HasConstraintName("fk_words_audio_clips_preferred_sandhi_audio_audio_clip_id");

                    b.Navigation("FengCategory");

                    b.Navigation("PreferredSandhiAudio");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.WordAudioClip", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.AudioClip", null)
                        .WithMany()
                        .HasForeignKey("AudioClipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_audio_clips_audio_clips_audio_clip_id");

                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.Word", null)
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_audio_clips_words_word_id");
                });

            modelBuilder.Entity("ZingzeuOrg.Yngdieng.Web.Db.WordListWord", b =>
                {
                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.Word", null)
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_list_words_words_word_id");

                    b.HasOne("ZingzeuOrg.Yngdieng.Web.Db.WordList", null)
                        .WithMany()
                        .HasForeignKey("WordListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_list_words_word_lists_word_list_id");
                });
#pragma warning restore 612, 618
        }
    }
}
